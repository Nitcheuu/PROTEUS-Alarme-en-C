CCS PCH C Compiler, Version 4.104, 5967               06-avr.-21 16:38

               Filename: D:\PIC\projet4\main.lst

               ROM used: 4698 bytes (14%)
                         Largest free fragment is 28066
               RAM used: 60 (4%) at main() level
                         98 (6%) worst case
               Stack:    5 worst case (2 in main + 3 for interrupts)

*
0000:  GOTO   104C
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  FF2.4
004A:  GOTO   0054
004E:  BTFSC  FF2.1
0050:  GOTO   03AA
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... #include "D:\PIC\projet\main.h" 
.................... #include <18F452.h> 
.................... //////// Standard Header file for the PIC18F452 device //////////////// 
.................... #device PIC18F452 
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES WDT128                	//Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES HS                    	//High speed Osc (> 4mhz for PCM/PCH) (>10mhz for PCD) 
.................... #FUSES NOPROTECT             	//Code not protected from reading 
.................... #FUSES NOOSCSEN              	//Oscillator switching is disabled, main oscillator is source 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES BORV20                	//Brownout reset at 2.0V 
.................... #FUSES NOPUT                 	//No Power Up Timer 
.................... #FUSES STVREN                	//Stack full/underflow will cause reset 
.................... #FUSES NODEBUG               	//No Debug mode for ICD 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                 	//Program memory not write protected 
.................... #FUSES NOWRTD                	//Data EEPROM not write protected 
.................... #FUSES NOWRTB                	//Boot block not write protected 
.................... #FUSES NOWRTC                	//configuration not registers write protected 
.................... #FUSES NOCPD                 	//No EE protection 
.................... #FUSES NOCPB                 	//No Boot Block code protection 
.................... #FUSES NOEBTR                	//Memory not protected from table reads 
.................... #FUSES NOEBTRB               	//Boot block not protected from table reads 
....................  
.................... #use delay(clock=20000000) 
*
011C:  CLRF   FEA
011E:  MOVLW  55
0120:  MOVWF  FE9
0122:  MOVF   FEF,W
0124:  BZ    0140
0126:  MOVLW  06
0128:  MOVWF  01
012A:  CLRF   00
012C:  DECFSZ 00,F
012E:  BRA    012C
0130:  DECFSZ 01,F
0132:  BRA    012A
0134:  MOVLW  7B
0136:  MOVWF  00
0138:  DECFSZ 00,F
013A:  BRA    0138
013C:  DECFSZ FEF,F
013E:  BRA    0126
0140:  RETLW  00
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
....................  
....................  
.................... // Clavier 
.................... #define L1 input(pin_d3) 
.................... #define L2 input(pin_d4) 
.................... #define L3 input(pin_d5) 
.................... #define L4 input(pin_d6) 
.................... // Intrusion 
.................... #define intrusion1 input(pin_b1) 
.................... #define intrusion2 input(pin_b2) 
.................... #define intrusion3 input(pin_b3) 
.................... #define intrusion4 input(pin_b4) 
.................... #define intrusion1Led output_high(pin_c1) 
.................... #define intrusion2Led output_high(pin_c2) 
.................... #define intrusion3Led output_high(pin_c5) 
.................... #define intrusion4Led output_high(pin_c4) 
.................... #define intrusion1LedLow output_low(pin_c1) 
.................... #define intrusion2LedLow output_low(pin_c2) 
.................... #define intrusion3LedLow output_low(pin_c5) 
.................... #define intrusion4LedLow output_low(pin_c4 
.................... #define intrusionRetar1 input(pin_b5) 
.................... #define intrusionRetar2 input(pin_b6) 
.................... #define intrusionRetar1Led output_high(pin_e0) 
.................... #define intrusionRetar2Led output_high(pin_e1) 
.................... #define intrusionRetar1LedLow output_low(pin_e0) 
.................... #define intrusionRetar2LedLow output_low(pin_e1) 
.................... // buzzer et sirene 
.................... #define buzzer output_high(pin_a0) 
.................... #define buzzerLow output_low(pin_a0) 
.................... #define sirene output_high(pin_b7) 
.................... #define sireneLow output_low(pin_b7) 
....................  
.................... int32 n = 0, n1; 
.................... int16 codeArmement = 33, codeDesa = 1236, delaiSirene = 180, temps = 0, delai = 20, tempsSirene = 0, tempsIntruRetar = 0; 
.................... int16 changeCodeA = 10, changeCodeD = 11, changeTempo = 20, changeSirene = 30;  
.................... int1 isArmed, intrusion, timerSirene, timerRetar, isDelay, clear; 
.................... float timeLeft = 0; 
....................  
.................... // Procédure qui permet de reset les différents codes 
.................... void defaut(){ 
....................    codeArmement = 33; 
*
038C:  CLRF   20
038E:  MOVLW  21
0390:  MOVWF  1F
....................    codeDesa = 1236; 
0392:  MOVLW  04
0394:  MOVWF  22
0396:  MOVLW  D4
0398:  MOVWF  21
....................    delaiSirene = 180; 
039A:  CLRF   24
039C:  MOVLW  B4
039E:  MOVWF  23
....................    delai = 20; 
03A0:  CLRF   28
03A2:  MOVLW  14
03A4:  MOVWF  27
.................... } 
03A6:  GOTO   0B12 (RETURN)
....................  
....................  
.................... // Procédure qui permet de lire le temps 
.................... // J'ai procédé ainsi car que le rtos faisait bugger mon programme 
.................... // J'ai mis 10 delay de 100 ms pour ne pas que la coupure ne se sente 
.................... // trop lors de l'execution du programme 
.................... void time(){ 
*
0C56:  CLRF   16
0C58:  BTFSC  FF2.7
0C5A:  BSF    16.7
0C5C:  BCF    FF2.7
....................    //printf("Temps = %lu\r\n",temps); 
....................    delay_ms(100); 
0C5E:  MOVLW  64
0C60:  MOVWF  55
0C62:  CALL   011C
0C66:  BTFSC  16.7
0C68:  BSF    FF2.7
0C6A:  CLRF   16
0C6C:  BTFSC  FF2.7
0C6E:  BSF    16.7
0C70:  BCF    FF2.7
....................    delay_ms(100); 
0C72:  MOVLW  64
0C74:  MOVWF  55
0C76:  CALL   011C
0C7A:  BTFSC  16.7
0C7C:  BSF    FF2.7
0C7E:  CLRF   16
0C80:  BTFSC  FF2.7
0C82:  BSF    16.7
0C84:  BCF    FF2.7
....................    delay_ms(100); 
0C86:  MOVLW  64
0C88:  MOVWF  55
0C8A:  CALL   011C
0C8E:  BTFSC  16.7
0C90:  BSF    FF2.7
0C92:  CLRF   16
0C94:  BTFSC  FF2.7
0C96:  BSF    16.7
0C98:  BCF    FF2.7
....................    delay_ms(100); 
0C9A:  MOVLW  64
0C9C:  MOVWF  55
0C9E:  CALL   011C
0CA2:  BTFSC  16.7
0CA4:  BSF    FF2.7
0CA6:  CLRF   16
0CA8:  BTFSC  FF2.7
0CAA:  BSF    16.7
0CAC:  BCF    FF2.7
....................    delay_ms(100); 
0CAE:  MOVLW  64
0CB0:  MOVWF  55
0CB2:  CALL   011C
0CB6:  BTFSC  16.7
0CB8:  BSF    FF2.7
0CBA:  CLRF   16
0CBC:  BTFSC  FF2.7
0CBE:  BSF    16.7
0CC0:  BCF    FF2.7
....................    delay_ms(100); 
0CC2:  MOVLW  64
0CC4:  MOVWF  55
0CC6:  CALL   011C
0CCA:  BTFSC  16.7
0CCC:  BSF    FF2.7
0CCE:  CLRF   16
0CD0:  BTFSC  FF2.7
0CD2:  BSF    16.7
0CD4:  BCF    FF2.7
....................    delay_ms(100); 
0CD6:  MOVLW  64
0CD8:  MOVWF  55
0CDA:  CALL   011C
0CDE:  BTFSC  16.7
0CE0:  BSF    FF2.7
0CE2:  CLRF   16
0CE4:  BTFSC  FF2.7
0CE6:  BSF    16.7
0CE8:  BCF    FF2.7
....................    delay_ms(100); 
0CEA:  MOVLW  64
0CEC:  MOVWF  55
0CEE:  CALL   011C
0CF2:  BTFSC  16.7
0CF4:  BSF    FF2.7
0CF6:  CLRF   16
0CF8:  BTFSC  FF2.7
0CFA:  BSF    16.7
0CFC:  BCF    FF2.7
....................    delay_ms(100); 
0CFE:  MOVLW  64
0D00:  MOVWF  55
0D02:  CALL   011C
0D06:  BTFSC  16.7
0D08:  BSF    FF2.7
0D0A:  CLRF   16
0D0C:  BTFSC  FF2.7
0D0E:  BSF    16.7
0D10:  BCF    FF2.7
....................    delay_ms(100); 
0D12:  MOVLW  64
0D14:  MOVWF  55
0D16:  CALL   011C
0D1A:  BTFSC  16.7
0D1C:  BSF    FF2.7
....................    temps ++; 
0D1E:  INCF   25,F
0D20:  BTFSC  FD8.2
0D22:  INCF   26,F
....................    // Ici on démarre le compteur des zonnes différés quand isArmed = 1 
....................    if (isArmed){ 
0D24:  BTFSS  35.0
0D26:  BRA    0D2E
....................       tempsIntruRetar ++; 
0D28:  INCF   2B,F
0D2A:  BTFSC  FD8.2
0D2C:  INCF   2C,F
....................    } 
....................    // De même pour le compteur de la sirène quand intrusion = 1 
....................    if (intrusion){  
0D2E:  BTFSS  35.1
0D30:  BRA    0D38
....................       tempsSirene ++; 
0D32:  INCF   29,F
0D34:  BTFSC  FD8.2
0D36:  INCF   2A,F
....................    } 
....................     
.................... } 
0D38:  GOTO   1100 (RETURN)
....................  
.................... // procédure cls qui permet de nettoyer le LCD 
.................... void cls(void){ 
....................   printf("%c%c",254,1); 
*
00EA:  MOVLW  FE
00EC:  BTFSS  F9E.4
00EE:  BRA    00EC
00F0:  MOVWF  FAD
00F2:  MOVLW  01
00F4:  BTFSS  F9E.4
00F6:  BRA    00F4
00F8:  MOVWF  FAD
.................... } 
00FA:  RETLW  00
....................  
....................  
.................... // Procédure qui permet de remettre le système dans son état initial 
.................... void reset(){ 
....................    isArmed = 0; 
*
0142:  BCF    35.0
....................          intrusion = 0; 
0144:  BCF    35.1
....................          tempsSirene = 0; 
0146:  CLRF   2A
0148:  CLRF   29
....................          tempsIntruRetar = 0; 
014A:  CLRF   2C
014C:  CLRF   2B
....................          isDelay = 0; 
014E:  BCF    35.4
....................          timerSirene = 0; 
0150:  BCF    35.2
....................          timerRetar = 0; 
0152:  BCF    35.3
....................          clear = 0; 
0154:  BCF    35.5
....................          intrusion1LedLow; 
0156:  BCF    F94.1
0158:  BCF    F8B.1
....................          intrusion1LedLow; 
015A:  BCF    F94.1
015C:  BCF    F8B.1
....................          intrusion1LedLow; 
015E:  BCF    F94.1
0160:  BCF    F8B.1
....................          intrusion1LedLow; 
0162:  BCF    F94.1
0164:  BCF    F8B.1
....................          buzzerLow; 
0166:  BCF    F92.0
0168:  BCF    F89.0
....................          intrusionRetar1LedLow; 
016A:  BCF    F96.0
016C:  BCF    F8D.0
....................          intrusionRetar2LedLow; 
016E:  BCF    F96.1
0170:  BCF    F8D.1
.................... } 
0172:  RETLW  00
....................  
.................... //Lecture du clavier + gestion du code entré avec des sinon si 
.................... #int_EXT 
.................... void  EXT_isr(void)  
.................... { 
....................   disable_interrupts(INT_EXT); 
*
03AA:  BCF    FF2.4
....................   output_high(pin_d0);// active la colonne de gauche 
03AC:  BCF    F95.0
03AE:  BSF    F8C.0
....................   output_low(pin_d1); 
03B0:  BCF    F95.1
03B2:  BCF    F8C.1
....................   output_low(pin_d2); 
03B4:  BCF    F95.2
03B6:  BCF    F8C.2
....................   if (L1) { 
03B8:  BSF    F95.3
03BA:  BTFSS  F83.3
03BC:  BRA    03FA
....................      printf("1"); n=10*n+1; 
03BE:  MOVLW  31
03C0:  BTFSS  F9E.4
03C2:  BRA    03C0
03C4:  MOVWF  FAD
03C6:  CLRF   57
03C8:  CLRF   56
03CA:  CLRF   55
03CC:  MOVLW  0A
03CE:  MOVWF  54
03D0:  MOVFF  1A,5B
03D4:  MOVFF  19,5A
03D8:  MOVFF  18,59
03DC:  MOVFF  17,58
03E0:  RCALL  0096
03E2:  MOVLW  01
03E4:  ADDWF  00,W
03E6:  MOVWF  17
03E8:  MOVLW  00
03EA:  ADDWFC 01,W
03EC:  MOVWF  18
03EE:  MOVLW  00
03F0:  ADDWFC 02,W
03F2:  MOVWF  19
03F4:  MOVLW  00
03F6:  ADDWFC 03,W
03F8:  MOVWF  1A
....................   }  
....................   if (L2) { 
03FA:  BSF    F95.4
03FC:  BTFSS  F83.4
03FE:  BRA    043C
....................      printf("4"); n=10*n+4; 
0400:  MOVLW  34
0402:  BTFSS  F9E.4
0404:  BRA    0402
0406:  MOVWF  FAD
0408:  CLRF   57
040A:  CLRF   56
040C:  CLRF   55
040E:  MOVLW  0A
0410:  MOVWF  54
0412:  MOVFF  1A,5B
0416:  MOVFF  19,5A
041A:  MOVFF  18,59
041E:  MOVFF  17,58
0422:  RCALL  0096
0424:  MOVLW  04
0426:  ADDWF  00,W
0428:  MOVWF  17
042A:  MOVLW  00
042C:  ADDWFC 01,W
042E:  MOVWF  18
0430:  MOVLW  00
0432:  ADDWFC 02,W
0434:  MOVWF  19
0436:  MOVLW  00
0438:  ADDWFC 03,W
043A:  MOVWF  1A
....................   } 
....................   if (L3) { 
043C:  BSF    F95.5
043E:  BTFSS  F83.5
0440:  BRA    047E
....................      printf("7");n=10*n+7; 
0442:  MOVLW  37
0444:  BTFSS  F9E.4
0446:  BRA    0444
0448:  MOVWF  FAD
044A:  CLRF   57
044C:  CLRF   56
044E:  CLRF   55
0450:  MOVLW  0A
0452:  MOVWF  54
0454:  MOVFF  1A,5B
0458:  MOVFF  19,5A
045C:  MOVFF  18,59
0460:  MOVFF  17,58
0464:  RCALL  0096
0466:  MOVLW  07
0468:  ADDWF  00,W
046A:  MOVWF  17
046C:  MOVLW  00
046E:  ADDWFC 01,W
0470:  MOVWF  18
0472:  MOVLW  00
0474:  ADDWFC 02,W
0476:  MOVWF  19
0478:  MOVLW  00
047A:  ADDWFC 03,W
047C:  MOVWF  1A
....................   } 
....................   if (L4) { 
047E:  BSF    F95.6
0480:  BTFSS  F83.6
0482:  BRA    048C
....................      printf("*"); 
0484:  MOVLW  2A
0486:  BTFSS  F9E.4
0488:  BRA    0486
048A:  MOVWF  FAD
....................       
....................   } 
....................    
....................   output_high(pin_d1); 
048C:  BCF    F95.1
048E:  BSF    F8C.1
....................   output_low(pin_d0); 
0490:  BCF    F95.0
0492:  BCF    F8C.0
....................   output_low(pin_d2);// active la colonne du milieu 
0494:  BCF    F95.2
0496:  BCF    F8C.2
....................   if (L1) { 
0498:  BSF    F95.3
049A:  BTFSS  F83.3
049C:  BRA    04DA
....................      printf("2");n=10*n+2; 
049E:  MOVLW  32
04A0:  BTFSS  F9E.4
04A2:  BRA    04A0
04A4:  MOVWF  FAD
04A6:  CLRF   57
04A8:  CLRF   56
04AA:  CLRF   55
04AC:  MOVLW  0A
04AE:  MOVWF  54
04B0:  MOVFF  1A,5B
04B4:  MOVFF  19,5A
04B8:  MOVFF  18,59
04BC:  MOVFF  17,58
04C0:  RCALL  0096
04C2:  MOVLW  02
04C4:  ADDWF  00,W
04C6:  MOVWF  17
04C8:  MOVLW  00
04CA:  ADDWFC 01,W
04CC:  MOVWF  18
04CE:  MOVLW  00
04D0:  ADDWFC 02,W
04D2:  MOVWF  19
04D4:  MOVLW  00
04D6:  ADDWFC 03,W
04D8:  MOVWF  1A
....................   }  
....................   if (L2) { 
04DA:  BSF    F95.4
04DC:  BTFSS  F83.4
04DE:  BRA    051C
....................      printf("5");n=10*n+5; 
04E0:  MOVLW  35
04E2:  BTFSS  F9E.4
04E4:  BRA    04E2
04E6:  MOVWF  FAD
04E8:  CLRF   57
04EA:  CLRF   56
04EC:  CLRF   55
04EE:  MOVLW  0A
04F0:  MOVWF  54
04F2:  MOVFF  1A,5B
04F6:  MOVFF  19,5A
04FA:  MOVFF  18,59
04FE:  MOVFF  17,58
0502:  RCALL  0096
0504:  MOVLW  05
0506:  ADDWF  00,W
0508:  MOVWF  17
050A:  MOVLW  00
050C:  ADDWFC 01,W
050E:  MOVWF  18
0510:  MOVLW  00
0512:  ADDWFC 02,W
0514:  MOVWF  19
0516:  MOVLW  00
0518:  ADDWFC 03,W
051A:  MOVWF  1A
....................   } 
....................   if (L3) { 
051C:  BSF    F95.5
051E:  BTFSS  F83.5
0520:  BRA    055E
....................      printf("8");n=10*n+8; 
0522:  MOVLW  38
0524:  BTFSS  F9E.4
0526:  BRA    0524
0528:  MOVWF  FAD
052A:  CLRF   57
052C:  CLRF   56
052E:  CLRF   55
0530:  MOVLW  0A
0532:  MOVWF  54
0534:  MOVFF  1A,5B
0538:  MOVFF  19,5A
053C:  MOVFF  18,59
0540:  MOVFF  17,58
0544:  RCALL  0096
0546:  MOVLW  08
0548:  ADDWF  00,W
054A:  MOVWF  17
054C:  MOVLW  00
054E:  ADDWFC 01,W
0550:  MOVWF  18
0552:  MOVLW  00
0554:  ADDWFC 02,W
0556:  MOVWF  19
0558:  MOVLW  00
055A:  ADDWFC 03,W
055C:  MOVWF  1A
....................   } 
....................   if (L4) { 
055E:  BSF    F95.6
0560:  BTFSS  F83.6
0562:  BRA    0598
....................      printf("0");n=10*n; 
0564:  MOVLW  30
0566:  BTFSS  F9E.4
0568:  BRA    0566
056A:  MOVWF  FAD
056C:  CLRF   57
056E:  CLRF   56
0570:  CLRF   55
0572:  MOVLW  0A
0574:  MOVWF  54
0576:  MOVFF  1A,5B
057A:  MOVFF  19,5A
057E:  MOVFF  18,59
0582:  MOVFF  17,58
0586:  RCALL  0096
0588:  MOVFF  03,1A
058C:  MOVFF  02,19
0590:  MOVFF  01,18
0594:  MOVFF  00,17
....................   } 
....................    
....................   output_high(pin_d2); 
0598:  BCF    F95.2
059A:  BSF    F8C.2
....................   output_low(pin_d0); 
059C:  BCF    F95.0
059E:  BCF    F8C.0
....................   output_low(pin_d1);// active la colonne de droite 
05A0:  BCF    F95.1
05A2:  BCF    F8C.1
....................   if (L1) { 
05A4:  BSF    F95.3
05A6:  BTFSS  F83.3
05A8:  BRA    05E6
....................      printf("3");n=10*n+3; 
05AA:  MOVLW  33
05AC:  BTFSS  F9E.4
05AE:  BRA    05AC
05B0:  MOVWF  FAD
05B2:  CLRF   57
05B4:  CLRF   56
05B6:  CLRF   55
05B8:  MOVLW  0A
05BA:  MOVWF  54
05BC:  MOVFF  1A,5B
05C0:  MOVFF  19,5A
05C4:  MOVFF  18,59
05C8:  MOVFF  17,58
05CC:  RCALL  0096
05CE:  MOVLW  03
05D0:  ADDWF  00,W
05D2:  MOVWF  17
05D4:  MOVLW  00
05D6:  ADDWFC 01,W
05D8:  MOVWF  18
05DA:  MOVLW  00
05DC:  ADDWFC 02,W
05DE:  MOVWF  19
05E0:  MOVLW  00
05E2:  ADDWFC 03,W
05E4:  MOVWF  1A
....................   }  
....................   if (L2) { 
05E6:  BSF    F95.4
05E8:  BTFSS  F83.4
05EA:  BRA    0628
....................      printf("6");n=10*n+6; 
05EC:  MOVLW  36
05EE:  BTFSS  F9E.4
05F0:  BRA    05EE
05F2:  MOVWF  FAD
05F4:  CLRF   57
05F6:  CLRF   56
05F8:  CLRF   55
05FA:  MOVLW  0A
05FC:  MOVWF  54
05FE:  MOVFF  1A,5B
0602:  MOVFF  19,5A
0606:  MOVFF  18,59
060A:  MOVFF  17,58
060E:  RCALL  0096
0610:  MOVLW  06
0612:  ADDWF  00,W
0614:  MOVWF  17
0616:  MOVLW  00
0618:  ADDWFC 01,W
061A:  MOVWF  18
061C:  MOVLW  00
061E:  ADDWFC 02,W
0620:  MOVWF  19
0622:  MOVLW  00
0624:  ADDWFC 03,W
0626:  MOVWF  1A
....................   } 
....................   if (L3) { 
0628:  BSF    F95.5
062A:  BTFSS  F83.5
062C:  BRA    066A
....................      printf("9");n=10*n+9; 
062E:  MOVLW  39
0630:  BTFSS  F9E.4
0632:  BRA    0630
0634:  MOVWF  FAD
0636:  CLRF   57
0638:  CLRF   56
063A:  CLRF   55
063C:  MOVLW  0A
063E:  MOVWF  54
0640:  MOVFF  1A,5B
0644:  MOVFF  19,5A
0648:  MOVFF  18,59
064C:  MOVFF  17,58
0650:  RCALL  0096
0652:  MOVLW  09
0654:  ADDWF  00,W
0656:  MOVWF  17
0658:  MOVLW  00
065A:  ADDWFC 01,W
065C:  MOVWF  18
065E:  MOVLW  00
0660:  ADDWFC 02,W
0662:  MOVWF  19
0664:  MOVLW  00
0666:  ADDWFC 03,W
0668:  MOVWF  1A
....................   } 
....................   if (L4) { 
066A:  BSF    F95.6
066C:  BTFSS  F83.6
066E:  BRA    0B46
....................     //n = n *0.01; 
....................     n1 = n; 
0670:  MOVFF  1A,1E
0674:  MOVFF  19,1D
0678:  MOVFF  18,1C
067C:  MOVFF  17,1B
....................     n = 0; 
0680:  CLRF   1A
0682:  CLRF   19
0684:  CLRF   18
0686:  CLRF   17
....................     cls(); 
0688:  RCALL  00EA
....................     //printf("n1 vaut : %lu\n\r",n1); 
....................     if(n1 == codeArmement && !isArmed){ 
068A:  MOVF   1F,W
068C:  SUBWF  1B,W
068E:  BNZ   06DE
0690:  MOVF   20,W
0692:  SUBWF  1C,W
0694:  BNZ   06DE
0696:  MOVF   1D,F
0698:  BNZ   06DE
069A:  MOVF   1E,F
069C:  BNZ   06DE
069E:  BTFSC  35.0
06A0:  BRA    06DE
....................          cls(); 
06A2:  RCALL  00EA
....................          printf("%c%cAlarme armée ",254,128); 
06A4:  MOVLW  FE
06A6:  BTFSS  F9E.4
06A8:  BRA    06A6
06AA:  MOVWF  FAD
06AC:  MOVLW  80
06AE:  BTFSS  F9E.4
06B0:  BRA    06AE
06B2:  MOVWF  FAD
06B4:  MOVLW  5E
06B6:  MOVWF  FF6
06B8:  MOVLW  0B
06BA:  MOVWF  FF7
06BC:  MOVLW  0D
06BE:  MOVWF  54
06C0:  RCALL  00FC
....................          delay_ms(1000); 
06C2:  MOVLW  04
06C4:  MOVWF  54
06C6:  MOVLW  FA
06C8:  MOVWF  55
06CA:  RCALL  011C
06CC:  DECFSZ 54,F
06CE:  BRA    06C6
....................          cls(); 
06D0:  RCALL  00EA
....................          isArmed = 1; 
06D2:  BSF    35.0
....................          n1 = 0; 
06D4:  CLRF   1E
06D6:  CLRF   1D
06D8:  CLRF   1C
06DA:  CLRF   1B
....................     } 
....................     // ici le cas où l'utilisateur rentre le code lors d'une intrusion 
....................     else if(n1 == codeArmement && intrusion && isArmed){ 
06DC:  BRA    0B46
06DE:  MOVF   1F,W
06E0:  SUBWF  1B,W
06E2:  BNZ   0730
06E4:  MOVF   20,W
06E6:  SUBWF  1C,W
06E8:  BNZ   0730
06EA:  MOVF   1D,F
06EC:  BNZ   0730
06EE:  MOVF   1E,F
06F0:  BNZ   0730
06F2:  BTFSS  35.1
06F4:  BRA    0730
06F6:  BTFSS  35.0
06F8:  BRA    0730
....................          cls(); 
06FA:  RCALL  00EA
....................          printf("%c%cOk",254,128); 
06FC:  MOVLW  FE
06FE:  BTFSS  F9E.4
0700:  BRA    06FE
0702:  MOVWF  FAD
0704:  MOVLW  80
0706:  BTFSS  F9E.4
0708:  BRA    0706
070A:  MOVWF  FAD
070C:  MOVLW  4F
070E:  BTFSS  F9E.4
0710:  BRA    070E
0712:  MOVWF  FAD
0714:  MOVLW  6B
0716:  BTFSS  F9E.4
0718:  BRA    0716
071A:  MOVWF  FAD
....................          delay_ms(1000); 
071C:  MOVLW  04
071E:  MOVWF  54
0720:  MOVLW  FA
0722:  MOVWF  55
0724:  RCALL  011C
0726:  DECFSZ 54,F
0728:  BRA    0720
....................          cls(); 
072A:  RCALL  00EA
....................          reset();         
072C:  RCALL  0142
....................     } 
....................     
....................     else if(n1 == codeDesa && isArmed){ 
072E:  BRA    0B46
0730:  MOVF   21,W
0732:  SUBWF  1B,W
0734:  BNZ   0794
0736:  MOVF   22,W
0738:  SUBWF  1C,W
073A:  BNZ   0794
073C:  MOVF   1D,F
073E:  BNZ   0794
0740:  MOVF   1E,F
0742:  BNZ   0794
0744:  BTFSS  35.0
0746:  BRA    0794
....................          cls(); 
0748:  RCALL  00EA
....................          printf("%c%cAlarme desarmee",254,128); 
074A:  MOVLW  FE
074C:  BTFSS  F9E.4
074E:  BRA    074C
0750:  MOVWF  FAD
0752:  MOVLW  80
0754:  BTFSS  F9E.4
0756:  BRA    0754
0758:  MOVWF  FAD
075A:  MOVLW  70
075C:  MOVWF  FF6
075E:  MOVLW  0B
0760:  MOVWF  FF7
0762:  MOVLW  0F
0764:  MOVWF  54
0766:  RCALL  00FC
....................          delay_ms(1000); 
0768:  MOVLW  04
076A:  MOVWF  54
076C:  MOVLW  FA
076E:  MOVWF  55
0770:  RCALL  011C
0772:  DECFSZ 54,F
0774:  BRA    076C
....................          cls(); 
0776:  RCALL  00EA
....................          isArmed = 0; 
0778:  BCF    35.0
....................          n1 = 0; 
077A:  CLRF   1E
077C:  CLRF   1D
077E:  CLRF   1C
0780:  CLRF   1B
....................          printf("%d", isArmed); 
0782:  MOVLW  00
0784:  BTFSC  35.0
0786:  MOVLW  01
0788:  MOVWF  55
078A:  MOVLW  1F
078C:  MOVWF  56
078E:  BRA    019C
....................          reset(); 
0790:  RCALL  0142
....................     } 
....................     else if(n1 == codeDesa && !isArmed){ 
0792:  BRA    0B46
0794:  MOVF   21,W
0796:  SUBWF  1B,W
0798:  BNZ   07E6
079A:  MOVF   22,W
079C:  SUBWF  1C,W
079E:  BNZ   07E6
07A0:  MOVF   1D,F
07A2:  BNZ   07E6
07A4:  MOVF   1E,F
07A6:  BNZ   07E6
07A8:  BTFSC  35.0
07AA:  BRA    07E6
....................          cls(); 
07AC:  RCALL  00EA
....................          printf("%c%cAlarme non armee",254,128); 
07AE:  MOVLW  FE
07B0:  BTFSS  F9E.4
07B2:  BRA    07B0
07B4:  MOVWF  FAD
07B6:  MOVLW  80
07B8:  BTFSS  F9E.4
07BA:  BRA    07B8
07BC:  MOVWF  FAD
07BE:  MOVLW  84
07C0:  MOVWF  FF6
07C2:  MOVLW  0B
07C4:  MOVWF  FF7
07C6:  MOVLW  10
07C8:  MOVWF  54
07CA:  RCALL  00FC
....................          delay_ms(1000); 
07CC:  MOVLW  04
07CE:  MOVWF  54
07D0:  MOVLW  FA
07D2:  MOVWF  55
07D4:  RCALL  011C
07D6:  DECFSZ 54,F
07D8:  BRA    07D0
....................          cls(); 
07DA:  RCALL  00EA
....................          n1 = 0; 
07DC:  CLRF   1E
07DE:  CLRF   1D
07E0:  CLRF   1C
07E2:  CLRF   1B
....................     } 
....................     else if(n1/100 == changeCodeA){ 
07E4:  BRA    0B46
07E6:  MOVFF  1E,57
07EA:  MOVFF  1D,56
07EE:  MOVFF  1C,55
07F2:  MOVFF  1B,54
07F6:  CLRF   5B
07F8:  CLRF   5A
07FA:  CLRF   59
07FC:  MOVLW  64
07FE:  MOVWF  58
0800:  RCALL  026E
0802:  MOVFF  03,57
0806:  MOVFF  02,56
080A:  MOVFF  01,55
080E:  MOVFF  00,54
0812:  MOVF   2D,W
0814:  SUBWF  00,W
0816:  BNZ   088A
0818:  MOVF   2E,W
081A:  SUBWF  55,W
081C:  BNZ   088A
081E:  MOVF   56,F
0820:  BNZ   088A
0822:  MOVF   57,F
0824:  BNZ   088A
....................          cls(); 
0826:  RCALL  00EA
....................          codeArmement = n1 %100; 
0828:  MOVFF  1E,57
082C:  MOVFF  1D,56
0830:  MOVFF  1C,55
0834:  MOVFF  1B,54
0838:  CLRF   5B
083A:  CLRF   5A
083C:  CLRF   59
083E:  MOVLW  64
0840:  MOVWF  58
0842:  RCALL  026E
0844:  MOVFF  FEF,1F
0848:  MOVFF  FEC,20
....................          printf("%c%cNouveau code : %lu",254,128,codeArmement); 
084C:  MOVLW  FE
084E:  BTFSS  F9E.4
0850:  BRA    084E
0852:  MOVWF  FAD
0854:  MOVLW  80
0856:  BTFSS  F9E.4
0858:  BRA    0856
085A:  MOVWF  FAD
085C:  MOVLW  9A
085E:  MOVWF  FF6
0860:  MOVLW  0B
0862:  MOVWF  FF7
0864:  MOVLW  0F
0866:  MOVWF  54
0868:  RCALL  00FC
086A:  MOVLW  10
086C:  MOVWF  FE9
086E:  MOVFF  20,55
0872:  MOVFF  1F,54
0876:  RCALL  02E8
....................          delay_ms(1000); 
0878:  MOVLW  04
087A:  MOVWF  54
087C:  MOVLW  FA
087E:  MOVWF  55
0880:  RCALL  011C
0882:  DECFSZ 54,F
0884:  BRA    087C
....................          cls(); 
0886:  RCALL  00EA
....................     } 
....................     else if(n1/10000 == changeCodeD){ 
0888:  BRA    0B46
088A:  MOVFF  1E,57
088E:  MOVFF  1D,56
0892:  MOVFF  1C,55
0896:  MOVFF  1B,54
089A:  CLRF   5B
089C:  CLRF   5A
089E:  MOVLW  27
08A0:  MOVWF  59
08A2:  MOVLW  10
08A4:  MOVWF  58
08A6:  RCALL  026E
08A8:  MOVFF  03,57
08AC:  MOVFF  02,56
08B0:  MOVFF  01,55
08B4:  MOVFF  00,54
08B8:  MOVF   2F,W
08BA:  SUBWF  00,W
08BC:  BNZ   0938
08BE:  MOVF   30,W
08C0:  SUBWF  55,W
08C2:  BNZ   0938
08C4:  MOVF   56,F
08C6:  BNZ   0938
08C8:  MOVF   57,F
08CA:  BNZ   0938
....................          cls(); 
08CC:  RCALL  00EA
....................          codeDesa = n1 %10000; 
08CE:  MOVFF  1E,57
08D2:  MOVFF  1D,56
08D6:  MOVFF  1C,55
08DA:  MOVFF  1B,54
08DE:  CLRF   5B
08E0:  CLRF   5A
08E2:  MOVLW  27
08E4:  MOVWF  59
08E6:  MOVLW  10
08E8:  MOVWF  58
08EA:  RCALL  026E
08EC:  MOVFF  FEF,21
08F0:  MOVFF  FEC,22
....................          printf("%c%cNouveau code desa : %lu",254,128,codeDesa); 
08F4:  MOVLW  FE
08F6:  BTFSS  F9E.4
08F8:  BRA    08F6
08FA:  MOVWF  FAD
08FC:  MOVLW  80
08FE:  BTFSS  F9E.4
0900:  BRA    08FE
0902:  MOVWF  FAD
0904:  MOVLW  B2
0906:  MOVWF  FF6
0908:  MOVLW  0B
090A:  MOVWF  FF7
090C:  MOVLW  14
090E:  MOVWF  54
0910:  CALL   00FC
0914:  MOVLW  10
0916:  MOVWF  FE9
0918:  MOVFF  22,55
091C:  MOVFF  21,54
0920:  RCALL  02E8
....................          delay_ms(1000); 
0922:  MOVLW  04
0924:  MOVWF  54
0926:  MOVLW  FA
0928:  MOVWF  55
092A:  CALL   011C
092E:  DECFSZ 54,F
0930:  BRA    0926
....................          cls(); 
0932:  CALL   00EA
....................     } 
....................     else if(n1/100 == changeTempo){ 
0936:  BRA    0B46
0938:  MOVFF  1E,57
093C:  MOVFF  1D,56
0940:  MOVFF  1C,55
0944:  MOVFF  1B,54
0948:  CLRF   5B
094A:  CLRF   5A
094C:  CLRF   59
094E:  MOVLW  64
0950:  MOVWF  58
0952:  RCALL  026E
0954:  MOVFF  03,57
0958:  MOVFF  02,56
095C:  MOVFF  01,55
0960:  MOVFF  00,54
0964:  MOVF   31,W
0966:  SUBWF  00,W
0968:  BNZ   09E4
096A:  MOVF   32,W
096C:  SUBWF  55,W
096E:  BNZ   09E4
0970:  MOVF   56,F
0972:  BNZ   09E4
0974:  MOVF   57,F
0976:  BNZ   09E4
....................          cls(); 
0978:  CALL   00EA
....................          delai = n1%100; 
097C:  MOVFF  1E,57
0980:  MOVFF  1D,56
0984:  MOVFF  1C,55
0988:  MOVFF  1B,54
098C:  CLRF   5B
098E:  CLRF   5A
0990:  CLRF   59
0992:  MOVLW  64
0994:  MOVWF  58
0996:  RCALL  026E
0998:  MOVFF  FEF,27
099C:  MOVFF  FEC,28
....................          printf("%c%cNouveau delai : %lu",254,128,delai); 
09A0:  MOVLW  FE
09A2:  BTFSS  F9E.4
09A4:  BRA    09A2
09A6:  MOVWF  FAD
09A8:  MOVLW  80
09AA:  BTFSS  F9E.4
09AC:  BRA    09AA
09AE:  MOVWF  FAD
09B0:  MOVLW  CE
09B2:  MOVWF  FF6
09B4:  MOVLW  0B
09B6:  MOVWF  FF7
09B8:  MOVLW  10
09BA:  MOVWF  54
09BC:  CALL   00FC
09C0:  MOVLW  10
09C2:  MOVWF  FE9
09C4:  MOVFF  28,55
09C8:  MOVFF  27,54
09CC:  RCALL  02E8
....................          delay_ms(1000); 
09CE:  MOVLW  04
09D0:  MOVWF  54
09D2:  MOVLW  FA
09D4:  MOVWF  55
09D6:  CALL   011C
09DA:  DECFSZ 54,F
09DC:  BRA    09D2
....................          cls(); 
09DE:  CALL   00EA
....................     } 
....................     else if(n1/1000 == changeSirene){ 
09E2:  BRA    0B46
09E4:  MOVFF  1E,57
09E8:  MOVFF  1D,56
09EC:  MOVFF  1C,55
09F0:  MOVFF  1B,54
09F4:  CLRF   5B
09F6:  CLRF   5A
09F8:  MOVLW  03
09FA:  MOVWF  59
09FC:  MOVLW  E8
09FE:  MOVWF  58
0A00:  RCALL  026E
0A02:  MOVFF  03,57
0A06:  MOVFF  02,56
0A0A:  MOVFF  01,55
0A0E:  MOVFF  00,54
0A12:  MOVF   33,W
0A14:  SUBWF  00,W
0A16:  BTFSS  FD8.2
0A18:  BRA    0AFC
0A1A:  MOVF   34,W
0A1C:  SUBWF  55,W
0A1E:  BTFSS  FD8.2
0A20:  BRA    0AFC
0A22:  MOVF   56,F
0A24:  BNZ   0AFC
0A26:  MOVF   57,F
0A28:  BNZ   0AFC
....................          cls(); 
0A2A:  CALL   00EA
....................          if (n1%1000 > 180){ 
0A2E:  MOVFF  1E,57
0A32:  MOVFF  1D,56
0A36:  MOVFF  1C,55
0A3A:  MOVFF  1B,54
0A3E:  CLRF   5B
0A40:  CLRF   5A
0A42:  MOVLW  03
0A44:  MOVWF  59
0A46:  MOVLW  E8
0A48:  MOVWF  58
0A4A:  RCALL  026E
0A4C:  MOVFF  FEF,54
0A50:  MOVFF  FEC,55
0A54:  MOVFF  FEC,56
0A58:  MOVFF  FEC,57
0A5C:  MOVF   57,F
0A5E:  BNZ   0A6E
0A60:  MOVF   56,F
0A62:  BNZ   0A6E
0A64:  MOVF   55,F
0A66:  BNZ   0A6E
0A68:  MOVF   54,W
0A6A:  SUBLW  B4
0A6C:  BC    0A90
....................             printf("%c%cDuree trop longue",254,128); 
0A6E:  MOVLW  FE
0A70:  BTFSS  F9E.4
0A72:  BRA    0A70
0A74:  MOVWF  FAD
0A76:  MOVLW  80
0A78:  BTFSS  F9E.4
0A7A:  BRA    0A78
0A7C:  MOVWF  FAD
0A7E:  MOVLW  E6
0A80:  MOVWF  FF6
0A82:  MOVLW  0B
0A84:  MOVWF  FF7
0A86:  MOVLW  11
0A88:  MOVWF  54
0A8A:  CALL   00FC
....................          } 
....................          else{ 
0A8E:  BRA    0AE6
....................             delaiSirene = n1%1000; 
0A90:  MOVFF  1E,57
0A94:  MOVFF  1D,56
0A98:  MOVFF  1C,55
0A9C:  MOVFF  1B,54
0AA0:  CLRF   5B
0AA2:  CLRF   5A
0AA4:  MOVLW  03
0AA6:  MOVWF  59
0AA8:  MOVLW  E8
0AAA:  MOVWF  58
0AAC:  CALL   026E
0AB0:  MOVFF  FEF,23
0AB4:  MOVFF  FEC,24
....................             printf("%c%cNouveau delai : %lu",254,128,delaiSirene); 
0AB8:  MOVLW  FE
0ABA:  BTFSS  F9E.4
0ABC:  BRA    0ABA
0ABE:  MOVWF  FAD
0AC0:  MOVLW  80
0AC2:  BTFSS  F9E.4
0AC4:  BRA    0AC2
0AC6:  MOVWF  FAD
0AC8:  MOVLW  FC
0ACA:  MOVWF  FF6
0ACC:  MOVLW  0B
0ACE:  MOVWF  FF7
0AD0:  MOVLW  10
0AD2:  MOVWF  54
0AD4:  CALL   00FC
0AD8:  MOVLW  10
0ADA:  MOVWF  FE9
0ADC:  MOVFF  24,55
0AE0:  MOVFF  23,54
0AE4:  RCALL  02E8
....................          } 
....................          delay_ms(1000); 
0AE6:  MOVLW  04
0AE8:  MOVWF  54
0AEA:  MOVLW  FA
0AEC:  MOVWF  55
0AEE:  CALL   011C
0AF2:  DECFSZ 54,F
0AF4:  BRA    0AEA
....................          cls(); 
0AF6:  CALL   00EA
....................     } 
....................     else if (n1 == 99000){ 
0AFA:  BRA    0B46
0AFC:  MOVF   1B,W
0AFE:  SUBLW  B8
0B00:  BNZ   0B46
0B02:  MOVF   1C,W
0B04:  SUBLW  82
0B06:  BNZ   0B46
0B08:  DECFSZ 1D,W
0B0A:  BRA    0B46
0B0C:  MOVF   1E,F
0B0E:  BNZ   0B46
....................          defaut(); 
0B10:  BRA    038C
....................          printf("%c%cParametres resets",254,128); 
0B12:  MOVLW  FE
0B14:  BTFSS  F9E.4
0B16:  BRA    0B14
0B18:  MOVWF  FAD
0B1A:  MOVLW  80
0B1C:  BTFSS  F9E.4
0B1E:  BRA    0B1C
0B20:  MOVWF  FAD
0B22:  MOVLW  14
0B24:  MOVWF  FF6
0B26:  MOVLW  0C
0B28:  MOVWF  FF7
0B2A:  MOVLW  11
0B2C:  MOVWF  54
0B2E:  CALL   00FC
....................          delay_ms(1000); 
0B32:  MOVLW  04
0B34:  MOVWF  54
0B36:  MOVLW  FA
0B38:  MOVWF  55
0B3A:  CALL   011C
0B3E:  DECFSZ 54,F
0B40:  BRA    0B36
....................          cls(); 
0B42:  CALL   00EA
....................     } 
....................      
....................    } 
....................  
....................    
....................   output_high(pin_d0); 
0B46:  BCF    F95.0
0B48:  BSF    F8C.0
....................   output_high(pin_d1); 
0B4A:  BCF    F95.1
0B4C:  BSF    F8C.1
....................   output_high(pin_d2); //activation des colonnes 
0B4E:  BCF    F95.2
0B50:  BSF    F8C.2
....................   enable_interrupts(INT_EXT); 
0B52:  BSF    FF2.4
.................... } 
....................  
....................  
....................  
0B54:  BCF    FF2.1
0B56:  GOTO   0054
.................... void main() 
.................... { 
*
104C:  CLRF   FF8
104E:  BCF    FD0.7
1050:  BSF    07.7
1052:  CLRF   FEA
1054:  CLRF   FE9
1056:  MOVLW  81
1058:  MOVWF  FAF
105A:  MOVLW  A6
105C:  MOVWF  FAC
105E:  MOVLW  90
1060:  MOVWF  FAB
1062:  CLRF   1A
1064:  CLRF   19
1066:  CLRF   18
1068:  CLRF   17
106A:  CLRF   20
106C:  MOVLW  21
106E:  MOVWF  1F
1070:  MOVLW  04
1072:  MOVWF  22
1074:  MOVLW  D4
1076:  MOVWF  21
1078:  CLRF   24
107A:  MOVLW  B4
107C:  MOVWF  23
107E:  CLRF   26
1080:  CLRF   25
1082:  CLRF   28
1084:  MOVLW  14
1086:  MOVWF  27
1088:  CLRF   2A
108A:  CLRF   29
108C:  CLRF   2C
108E:  CLRF   2B
1090:  CLRF   2E
1092:  MOVLW  0A
1094:  MOVWF  2D
1096:  CLRF   30
1098:  MOVLW  0B
109A:  MOVWF  2F
109C:  CLRF   32
109E:  MOVLW  14
10A0:  MOVWF  31
10A2:  CLRF   34
10A4:  MOVLW  1E
10A6:  MOVWF  33
10A8:  CLRF   39
10AA:  CLRF   38
10AC:  CLRF   37
10AE:  CLRF   36
10B0:  BSF    FC1.0
10B2:  BSF    FC1.1
10B4:  BSF    FC1.2
10B6:  BCF    FC1.3
....................  
....................    setup_adc_ports(AN0); 
10B8:  BCF    FC1.0
10BA:  BSF    FC1.1
10BC:  BSF    FC1.2
10BE:  BSF    FC1.3
....................    setup_adc(ADC_CLOCK_DIV_2); 
10C0:  BCF    FC1.6
10C2:  BCF    FC2.6
10C4:  BCF    FC2.7
10C6:  BCF    FC1.7
10C8:  BSF    FC2.0
....................    setup_psp(PSP_DISABLED); 
10CA:  BCF    F96.4
....................    setup_spi(SPI_SS_DISABLED); 
10CC:  BCF    FC6.5
10CE:  BCF    F94.5
10D0:  BSF    F94.4
10D2:  BCF    F94.3
10D4:  MOVLW  01
10D6:  MOVWF  FC6
10D8:  MOVLW  00
10DA:  MOVWF  FC7
....................    setup_wdt(WDT_OFF); 
10DC:  BCF    FD1.0
....................    setup_timer_0(RTCC_INTERNAL); 
10DE:  MOVLW  80
10E0:  MOVWF  FD5
....................    setup_timer_1(T1_DISABLED); 
10E2:  CLRF   FCD
....................    setup_timer_2(T2_DISABLED,0,1); 
10E4:  MOVLW  00
10E6:  MOVWF  FCA
10E8:  MOVLW  00
10EA:  MOVWF  FCB
....................    enable_interrupts(INT_EXT); 
10EC:  BSF    FF2.4
....................    enable_interrupts(GLOBAL); 
10EE:  MOVLW  C0
10F0:  IORWF  FF2,F
.................... //Setup_Oscillator parameter not selected from Intr Oscillator Config tab 
....................  
....................    // TODO: USER CODE!! 
....................    output_high(pin_d0); 
10F2:  BCF    F95.0
10F4:  BSF    F8C.0
....................    output_high(pin_d1); 
10F6:  BCF    F95.1
10F8:  BSF    F8C.1
....................    output_high(pin_d2); 
10FA:  BCF    F95.2
10FC:  BSF    F8C.2
....................    while(true){ 
....................        
....................       time(); 
10FE:  BRA    0C56
....................        
....................       //printf("%lu\r\n",CodeArmement); 
....................       if (isArmed){ 
1100:  BTFSS  35.0
1102:  BRA    11F0
....................        
....................          output_high(pin_c0); // allume la led "Alarme active" 
1104:  BCF    F94.0
1106:  BSF    F8B.0
....................           
....................          // ici quand le delai n'est pas encore atteint, on affiche sur le 
....................          // LCD le nombre de secondes restantes pour sortir par une zone 
....................          // différée  
....................          if(!isDelay){ 
1108:  BTFSC  35.4
110A:  BRA    1190
....................             timeLeft = delai-tempsIntruRetar;  
110C:  MOVF   2B,W
110E:  SUBWF  27,W
1110:  MOVWF  00
1112:  MOVF   2C,W
1114:  SUBWFB 28,W
1116:  MOVWF  03
1118:  MOVFF  00,3A
111C:  MOVWF  3B
111E:  BRA    0D3C
1120:  MOVFF  03,39
1124:  MOVFF  02,38
1128:  MOVFF  01,37
112C:  MOVFF  00,36
....................             printf("%c%cTemps restant : %f",254,128, timeLeft ); 
1130:  MOVLW  FE
1132:  BTFSS  F9E.4
1134:  BRA    1132
1136:  MOVWF  FAD
1138:  MOVLW  80
113A:  BTFSS  F9E.4
113C:  BRA    113A
113E:  MOVWF  FAD
1140:  MOVLW  2A
1142:  MOVWF  FF6
1144:  MOVLW  0C
1146:  MOVWF  FF7
1148:  CLRF   16
114A:  BTFSC  FF2.7
114C:  BSF    16.7
114E:  BCF    FF2.7
1150:  MOVLW  10
1152:  MOVWF  54
1154:  CALL   00FC
1158:  BTFSC  16.7
115A:  BSF    FF2.7
115C:  MOVLW  89
115E:  MOVWF  FE9
1160:  MOVFF  39,3D
1164:  MOVFF  38,3C
1168:  MOVFF  37,3B
116C:  MOVFF  36,3A
1170:  MOVLW  02
1172:  MOVWF  3E
1174:  BRA    0EA8
....................             // Permet de faire clignoter le buzzer une seconde sur deux 
....................             if(temps % 2 == 0){ 
1176:  MOVF   25,W
1178:  ANDLW  01
117A:  MOVWF  3A
117C:  CLRF   3B
117E:  MOVF   3A,F
1180:  BNZ   118C
1182:  MOVF   3B,F
1184:  BNZ   118C
....................                buzzer; 
1186:  BCF    F92.0
1188:  BSF    F89.0
....................             } 
....................             else{ 
118A:  BRA    1190
....................                buzzerLow; 
118C:  BCF    F92.0
118E:  BCF    F89.0
....................             } 
....................          } 
....................           
....................          // Permet de clear le LCD à la fin du décompte 
....................          if(isDelay && !clear){ 
1190:  BTFSS  35.4
1192:  BRA    119E
1194:  BTFSC  35.5
1196:  BRA    119E
....................             cls(); 
1198:  CALL   00EA
....................             clear =1; 
119C:  BSF    35.5
....................          } 
....................          // Déclenchements divers en cas d'intrusion 
....................          if (intrusion1){ 
119E:  BSF    F93.1
11A0:  BTFSS  F81.1
11A2:  BRA    11AA
....................             intrusion1Led; 
11A4:  BCF    F94.1
11A6:  BSF    F8B.1
....................             intrusion = 1; 
11A8:  BSF    35.1
....................          } 
....................        
....................          if (intrusion2){ 
11AA:  BSF    F93.2
11AC:  BTFSS  F81.2
11AE:  BRA    11B6
....................             intrusion2Led; 
11B0:  BCF    F94.2
11B2:  BSF    F8B.2
....................             intrusion = 1; 
11B4:  BSF    35.1
....................          } 
....................     
....................           
....................          if (intrusion3){ 
11B6:  BSF    F93.3
11B8:  BTFSS  F81.3
11BA:  BRA    11C2
....................             intrusion3Led; 
11BC:  BCF    F94.5
11BE:  BSF    F8B.5
....................             intrusion = 1; 
11C0:  BSF    35.1
....................          } 
....................           
....................          if (intrusion4){ 
11C2:  BSF    F93.4
11C4:  BTFSS  F81.4
11C6:  BRA    11CE
....................             intrusion4Led; 
11C8:  BCF    F94.4
11CA:  BSF    F8B.4
....................             intrusion = 1; 
11CC:  BSF    35.1
....................          } 
....................          if(intrusionRetar1 && isDelay){ 
11CE:  BSF    F93.5
11D0:  BTFSS  F81.5
11D2:  BRA    11DE
11D4:  BTFSS  35.4
11D6:  BRA    11DE
....................             intrusionRetar1Led; 
11D8:  BCF    F96.0
11DA:  BSF    F8D.0
....................             intrusion = 1; 
11DC:  BSF    35.1
....................          } 
....................          if(intrusionRetar2 && isDelay){ 
11DE:  BSF    F93.6
11E0:  BTFSS  F81.6
11E2:  BRA    11EE
11E4:  BTFSS  35.4
11E6:  BRA    11EE
....................             intrusionRetar2Led; 
11E8:  BCF    F96.1
11EA:  BSF    F8D.1
....................             intrusion = 1; 
11EC:  BSF    35.1
....................          } 
....................       } 
....................       else{ 
11EE:  BRA    11F4
....................          output_low(pin_c0); // si !isArmed on éteint la led "Alarme active" 
11F0:  BCF    F94.0
11F2:  BCF    F8B.0
....................       } 
....................       // Gestion de la sirène on vérifie qu'il y a bien une intrusion et que 
....................       // la durée de déclenchement de la sirène est inférieur au délai max 
....................       if(intrusion && tempsSirene <= delaiSirene){ 
11F4:  BTFSS  35.1
11F6:  BRA    120C
11F8:  MOVF   2A,W
11FA:  SUBWF  24,W
11FC:  BNC   120C
11FE:  BNZ   1206
1200:  MOVF   29,W
1202:  SUBWF  23,W
1204:  BNC   120C
....................          sirene; 
1206:  BCF    F93.7
1208:  BSF    F8A.7
....................       } 
....................       else{ 
120A:  BRA    1210
....................          sireneLow; // sinon on coupe la sirène 
120C:  BCF    F93.7
120E:  BCF    F8A.7
....................       } 
....................       if (tempsIntruRetar >= delai){ 
1210:  MOVF   28,W
1212:  SUBWF  2C,W
1214:  BNC   1220
1216:  BNZ   121E
1218:  MOVF   27,W
121A:  SUBWF  2B,W
121C:  BNC   1220
....................          isDelay = 1; 
121E:  BSF    35.4
....................       } 
....................       if(intrusion){ 
1220:  BTFSS  35.1
1222:  BRA    125A
....................          isDelay = 1; 
1224:  BSF    35.4
....................          buzzerLow; 
1226:  BCF    F92.0
1228:  BCF    F89.0
....................          cls(); 
122A:  CALL   00EA
....................          printf("%c%cIntrusion detectee",254,128); 
122E:  MOVLW  FE
1230:  BTFSS  F9E.4
1232:  BRA    1230
1234:  MOVWF  FAD
1236:  MOVLW  80
1238:  BTFSS  F9E.4
123A:  BRA    1238
123C:  MOVWF  FAD
123E:  MOVLW  42
1240:  MOVWF  FF6
1242:  MOVLW  0C
1244:  MOVWF  FF7
1246:  CLRF   16
1248:  BTFSC  FF2.7
124A:  BSF    16.7
124C:  BCF    FF2.7
124E:  MOVLW  12
1250:  MOVWF  54
1252:  CALL   00FC
1256:  BTFSC  16.7
1258:  BSF    FF2.7
....................       } 
....................        
....................        
....................       //printf("TempsNow: %lu\n\r",tempsSirene); 
....................       //printf("TempsIntru: %lu\n\r",tempsIntruRetar); 
....................       //printf("Temps: %lu\n\r",temps); 
....................    } 
125A:  BRA    10FE
....................     
.................... } 
125C:  SLEEP 

Configuration Fuses:
   Word  1: 2200   HS NOOSCSEN
   Word  2: 0E0D   NOBROWNOUT WDT128 NOWDT BORV20 NOPUT
   Word  3: 0100   CCP2C1
   Word  4: 0081   STVREN NODEBUG NOLVP
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTB NOWRTC
   Word  7: 400F   NOEBTR NOEBTRB
